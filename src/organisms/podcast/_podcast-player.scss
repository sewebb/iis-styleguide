@charset "UTF-8";
@use "sass:color";
@use "sass:math";
@use '../../configurations/mixins' as mixin;
@use '../../configurations/bem' as bem;
@use '../../configurations/config' as config;
@use '../../configurations/variables' as var;
@use '../../configurations/functions' as func;
@use '../../configurations/colors/colors' as colors;
@use '../../configurations/colors/colors-functions' as colorFunc;
@use '../../vendor/grid/breakpoints' as breakpoint;
@use '../../vendor/grid/grid' as grid;
@use '../../vendor/baseline/plumber' as plumber;

@include mixin.organism(podcast-player) {

	/* Player */

	$time-left-width: func.to_rem(65px);

	position: fixed;
	z-index: func.z_index(middlegroundImportant);
	right: 0;
	bottom: 0;
	left: 0;
	padding: func.rhythm(1) 0 0 0;
	transform: translateY(0);
	transition: transform 0.25s ease-out;
	background-color: colors.$color-snow;
	box-shadow: 0 -#{func.rhythm(1)} func.rhythm(3) color.adjust(colors.$color-cyberspace, $lightness: 70%);

	@include bem.m(hidden) {
		transform: translateY(100%);
		box-shadow: none;
	}

	@include bem.e(player) {
		display: flex;
		flex-grow: 1;
		align-items: center;

		@include bem.e(show-info) {
			display: none;

			@include breakpoint.bp-up(sm) {
				display: block;
			}
		}

		@include bem.e(image) {
			display: none;

			@include breakpoint.bp-up(md) {
				display: flex;
				flex-grow: 0;
				width: func.rhythm(7);
				height: func.rhythm(7);
				margin-right: func.rhythm(2);
				border-radius: var.$border-radius;
			}
		}
	}

	@include bem.e(show-info) {
		display: flex;
		flex-direction: column;
	}

	@include bem.e(title) {
		margin-bottom: 0;
		color: colors.$color-ruby;
		font-family: var.$font-family-headings;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
		max-width: func.to_rem(200px);

		@include breakpoint.bp-up(sm) {
			max-width: func.to_rem(250px);
		}

		@include breakpoint.bp-up(lg) {
			max-width: func.to_rem(500px);
		}
	}

	@include bem.e(description) {
		display: block;
		max-width: func.to_rem(200px);
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;

		> p {
			display: none;
		}

		@include breakpoint.bp-up(sm) {
			max-width: func.to_rem(250px);
		}

		@include breakpoint.bp-up(lg) {
			max-width: func.to_rem(500px);
		}
	}

	@include bem.e(playtime) {
		@include breakpoint.bp-between(sm, md) {
			display: none;
		}
	}

	@include bem.e(spacer) {
		@include breakpoint.bp-between(sm, md) {
			display: none;
		}
	}

	@include bem.e(controls) {
		display: flex;
		flex-grow: 1;
		align-items: center;
		justify-content: center;
	}

	@include bem.e(spacer) {
		margin-right: func.rhythm(0.5);
		margin-left: func.rhythm(0.5);
	}

	@include bem.e(button) {
		display: flex;
		align-items: center;
		margin: 0 func.rhythm(1);
		padding: 0;
		border: 0;
		background-color: transparent;

		&:hover {
			> svg {
				fill: colors.$color-ruby;
			}
		}
	}

	@include bem.e(timeleft) {
		min-width: $time-left-width;
	}

	@include bem.e(rewind-icon) {
		width: var.$icon-size-large * 1.2;
		height: var.$icon-size-large * 1.2;
	}

	@include bem.e(forward-icon) {
		width: var.$icon-size-large * 1.2;
		height: var.$icon-size-large * 1.2;
	}

	@include bem.e(play-icon) {
		display: block;
		width: var.$icon-size-large * 1.5;
		height: var.$icon-size-large * 1.5;
	}

	@include bem.e(progressbar) {
		flex-wrap: wrap;
		width: 100%;
		height: func.rhythm(0.5);
		margin-top: func.rhythm(1);
		background-color: colors.$color-concrete;

		@include bem.e(progress) {
			width: 0;
			height: func.rhythm(1);
		}
	}

	@include bem.e(close) {
		position: absolute;
		right: func.rhythm(0.5);
		top: 50%;
		transform: translateY(-50%);

		@include breakpoint.bp-up(xxl) {
			right: func.rhythm(2);
		}
	}
}
