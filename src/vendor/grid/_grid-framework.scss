@charset "UTF-8";
@use "sass:map";
@use "sass:math";
@use "sass:list";
@use '../../configurations/variables' as v;
@use 'breakpoints' as bp;
@use 'grid' as m5;

// Framework grid generation
//
// Used to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: v.$grid-columns, $gutter: v.$grid-gutter-width, $breakpoints: v.$grid-breakpoints) {
	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		width: 100%;
		min-height: 1px; // Prevent columns from collapsing when empty
		padding-right: list.slash($gutter, 2);
		padding-left: list.slash($gutter, 2);
	}

	@each $breakpoint in map.keys($breakpoints) {
		$infix: bp.breakpoint-infix($breakpoint, $breakpoints);

		// Allow columns to stretch full width below their breakpoints
		@for $i from 1 through $columns {
			.grid#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}

		.grid#{$infix},
		.grid#{$infix}-auto {
			@extend %grid-column;
		}

		@include bp.bp-up($breakpoint, $breakpoints) {
			// Provide basic `.grid-{bp}` classes for equal-width flexbox columns
			.grid#{$infix} {
				flex-basis: 0;
				flex-grow: 1;
				max-width: 100%;
			}

			.grid#{$infix}-auto {
				flex: 0 0 auto;
				width: auto;
				max-width: none; // Reset earlier grid tiers
			}

			@for $i from 1 through $columns {
				.grid#{$infix}-#{$i} {
					@include m5.make-col($i, $columns);
				}
			}

			@for $i from 1 through $columns {
				.order#{$infix}-#{$i} {
					order: $i;
				}
			}

			// `$columns - 1` because offsetting by the width of an entire row isn't possible
			@for $i from 0 through ($columns - 1) {
				@if not ($infix == '' and $i == 0) { // Avoid emitting useless .offset-0
					.offset#{$infix}-#{$i} {
						@include m5.make-col-offset($i, $columns); }
				}
			}
		}
	}
}
