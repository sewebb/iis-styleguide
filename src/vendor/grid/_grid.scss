@charset "UTF-8";
@use "sass:math";
@use "sass:list";
@use '../../configurations/variables' as v;
@use 'breakpoints' as bp;

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
	width: 100%;
	margin-right: auto;
	margin-left: auto;
	padding-right: list.slash(v.$grid-gutter-width, 2);
	padding-left: list.slash(v.$grid-gutter-width, 2);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: v.$container-max-widths, $breakpoints: v.$grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include bp.bp-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row() {
	display: flex;
	flex-wrap: wrap;
	margin-right: list.slash(v.$grid-gutter-width, -2);
	margin-left: list.slash(v.$grid-gutter-width, -2);
}

@mixin make-col-ready() {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing
	padding-right: math.div(v.$grid-gutter-width, 2);
	padding-left: math.div(v.$grid-gutter-width, 2);
}

@mixin make-col($size, $columns: v.$grid-columns) {
	flex: 0 0 math.percentage(math.div($size, $columns));
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: math.percentage(math.div($size, $columns));
}

@mixin make-col-offset($size, $columns: v.$grid-columns) {
	margin-left: math.percentage(math.div($size, $columns));
}
