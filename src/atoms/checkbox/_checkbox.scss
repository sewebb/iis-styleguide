@charset "UTF-8";
@use "sass:color";
@use '../../configurations/mixins' as m;
@use '../../configurations/bem' as m2;
@use '../../configurations/variables' as v;
@use '../../configurations/colors/colors' as c;
@use '../../configurations/colors/colors-functions' as cf;

@include m.atom(checkbox) {
	&[type='checkbox'] {
		+ label {
			display: inline-flex;
			position: relative;
			align-items: flex-start;
			padding-top: rhythm(0.5);
			padding-right: rhythm(2);
			padding-bottom: rhythm(0.5);
			font-family: v.$font-family-base;

			&::before {
				content: '';
				display: block;
				flex-shrink: 0;
				width: v.$icon-size-small;
				height: v.$icon-size-small;
				margin-top: to_rem(3px);
				margin-right: rhythm(1);
				border: 1px solid c.$color-cyberspace;
				border-radius: v.$border-radius;
				background-color: c.$color-snow;
			}
		}

		&:not([disabled]) {
			&:focus,
			&:hover {
				+ label {
					&::before {
						background-color: color.adjust(c.$color-ash, $lightness: -5%);
					}
				}
			}
		}

		&:checked {
			+ label {
				&::after {
					content: '';
					display: block;
					position: absolute;
					top: to_rem(10.5px);
					left: to_rem(6px);
					width: to_rem(5px);
					height: to_rem(9px);
					transform: rotate(45deg);
					border: solid c.$color-cyberspace;
					border-width: 0 2px 2px 0;
				}
			}
		}

		&[disabled] {
			+ label {
				@extend %disabled;

				&::before {
					background-color: color.adjust(c.$color-concrete, $lightness: -5%);
				}
			}
		}
	}
}

@include m2.b(checkbox) {
	&.is-invalid {
		[type='checkbox'] {
			+ label {
				&::before {
					border-color: c.$color-ruby-dark;
					background-color: c.$color-ruby-light;
				}
			}
		}
	}
	@include m2.m(inline) {
		padding-top: 0;
		padding-bottom: 0;

		input[type='checkbox'] {
			+ label {
				margin-top: rhythm(1);
				margin-bottom: rhythm(1);
			}
		}
	}
}
