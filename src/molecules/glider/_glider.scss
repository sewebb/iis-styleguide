@charset "UTF-8";
@use "sass:color";
@use '../../configurations/mixins' as mixin;
@use '../../configurations/bem' as bem;
@use '../../configurations/variables' as var;
@use '../../configurations/functions' as func;
@use '../../configurations/colors/colors' as colors;
@use '../../vendor/grid/breakpoints' as breakpoint;

// The Glider components is dependant on JS-classes and is therefore not namespaced

.glider-contain {
	display: flex;
	position: relative;
	align-items: center;
	margin-top: func.rhythm(2);
	margin-bottom: func.rhythm(2);
	padding-right: func.rhythm(8);
	padding-left: func.rhythm(8);
}

.glider {
	position: relative;
	margin: 0 auto;
	overflow: hidden;
	//transform: translateZ(0);
	backface-visibility: hidden;
	-webkit-overflow-scrolling: touch;
	-ms-overflow-style: none;

	&.draggable {
		cursor: grab;
		user-select: none;

		@include bem.b(glider-slide) {
			img {
				pointer-events: none;
				user-select: none;
			}
		}
	}

	&.drag {
		cursor: -webkit-grabbing;
		cursor: grabbing;
	}
}

.glider-track {
	display: flex;
	z-index: 1;
	align-items: stretch;
	width: 100%;
	margin: 0;
	padding: 0;
	//transform: translateZ(0);
}

.glider-slide {
	position: relative;
	width: 100%;
	min-width: 150px;
	margin-left: 1px;
	padding: func.rhythm(2) 0;
	overflow: hidden;

	img:not([class]) {
		display: block;
		border-radius: var.$border-radius;
		width: 100%;
	}

	@include breakpoint.bp-only(sm) {
		padding-right: func.rhythm(2);
		padding-left: func.rhythm(2);
	}

	@include breakpoint.bp-up(lg) {
		padding-right: func.rhythm(3);
		padding-left: func.rhythm(3);
	}

	@include bem.m(stretch-items) {
		display: flex;
		align-items: stretch;
	}

	@include breakpoint.bp-up(lg) {
		&:not(.active) {
			&::after {
				content: '';
				position: absolute;
				top: 0;
				bottom: 0;
				left: 0;
				width: 1px;
				background-color: colors.$color-concrete;
			}
		}
	}
}

.glider-nav {
	position: absolute;
	top: 50%;
	left: 0;
	z-index: z_index(middleground);
	transform: translateY(-50%);
	transition: background-color 0.25s ease-out;
	user-select: none;
	cursor: pointer;

	&:focus {
		background-color: colors.$color-snow;
	}

	svg {
		transition: opacity 0.25s ease-out;
		opacity: 1;
	}

	&.disabled {
		background-color: colors.$color-ash;
		box-shadow: 0 2px 5px color.adjust(colors.$color-granit, $lightness: 25%);
		pointer-events: none;

		svg {
			opacity: 0.2;
			fill: colors.$color-cyberspace;
		}
	}

	@include breakpoint.bp-up(sm) {
		left: func.rhythm(1);
	}
}

.glider-next {
	right: 0;
	left: auto;

	@include breakpoint.bp-up(sm) {
		right: func.rhythm(1);
	}
}

.glider-course-prev,
.glider-course-next {
	&.disabled {
		display: none;

		+ .glider-course-finish {
			display: inline-flex;
		}
	}
}

.glider-course-finish {
	display: none;
}

.glider-hide {
	opacity: 0;
}

.glider-dots {
	display: flex;
	flex-wrap: nowrap;
	justify-content: center;
	margin: 0 auto;
	padding: 0;
	user-select: none;
}

.glider-dot {
	display: block;
	width: func.to_rem(14px);
	height: func.to_rem(14px);
	margin: func.rhythm(0.5);
	padding: 0;
	border: 0;
	border-radius: 50%;
	outline: none;
	background: colors.$color-concrete;
	cursor: pointer;
	user-select: none;

	&:hover,
	&:focus,
	&.active {
		background: colors.$color-cyberspace;
	}
}
