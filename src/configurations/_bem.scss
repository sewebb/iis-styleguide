@charset "UTF-8";
@use "sass:meta";
@use "sass:string";
@use '../configurations/variables' as v;

/// Element class separator
/// @group BEM
$element-separator: '__';

/// Element class modifier
/// @group BEM
$modifier-separator: '--';

/// Element class state prefix
/// @group BEM
$state-prefix: 'is';

/// Converts selector to string
/// @group BEM
@function selector_to_string($selector) {
	$selector: meta.inspect($selector); //cast to string
	$selector: string.slice($selector, 2, -2); //remove brackets
	@return $selector;
}

/// Checks if a inside a BEM modifier
/// @group BEM
@function contains_modifier($selector) {
	$selector: selector_to_string($selector);
	@if string.index($selector, $modifier-separator) {
		@return true;
	} @else {
		@return false;
	}
}

/// Get BEM block
/// @group BEM
@function get_block($selector) {
	$selector: selector_to_string($selector);
	$modifier-start: string.index($selector, $modifier-separator) - 1;
	@return string.slice($selector, 0, $modifier-start);
}

/// Encapsulates a standalone entity that is meaningful on its own.
/// @group BEM
@mixin b($name) {
	.#{v.$namespace}#{$name} {
		@content;
	}
}

/// Parts of a block and have no standalone meaning
/// @group BEM
@mixin e($element) {
	$selector: &;
	@if contains_modifier($selector) {
		$block: get_block($selector);
		@at-root {
			#{$selector} {
				#{$block + $element-separator + $element} {
					@content;
				}
			}
		}
	} @else {
		@at-root {
			#{$selector + $element-separator + $element} {
				@content;
			}
		}
	}
}

/// Flags on blocks or elements. Use them to change appearance or behavior.
/// @group BEM
@mixin m($modifier) {
	@at-root {
		#{&}#{$modifier-separator + $modifier} {
			@content;
		}
	}
}

/// States on blocks or elements. Use them to state.
/// @group BEM
@mixin s($state, $prefix: $state-prefix) {
	@at-root {
		&.#{$prefix}-#{$state} {
			@content;
		}
	}
}
