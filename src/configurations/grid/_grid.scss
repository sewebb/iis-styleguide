@charset "UTF-8";

@use "sass:math";
@use '../variables' as var;
@use '../functions' as func;
@use '../../vendor/grid/grid' as grid;
@use '../../vendor/grid/breakpoints' as breakpoint;
@use '../../vendor/grid/grid-framework' as gridFramework;

// Grid only
//
// Includes relevant variables and mixins for the flexbox grid
// system, as well as the generated predefined classes (e.g., `.col-sm-4`).

//
// Box sizing, responsive, and more
//

@at-root {
	@-ms-viewport { width: device-width; }
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if var.$enable-grid-classes {
	.wrapper,
	%wrapper {
		@include grid.make-container();
		@include grid.make-container-max-widths();

		// Specify bigger wrapper padding on smaller screens
		@include breakpoint.bp-down(xl) {
			padding-right: var.$grid-gutter-width;
			padding-left: var.$grid-gutter-width;
		}
	}
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

@if var.$enable-grid-classes {
	.wrapper-fluid {
		@include grid.make-container();
	}
}

// Row
//
// Rows contain and clear the floats of your columns.

@mixin make-asymmetric-cols($gap, $reversed: false) {
	@for $i from 1 through 3 {
		$col-gap: $gap * ($i - 1);

		@if $reversed == false {
			$col-gap: -$col-gap;
		}

		> .grid,
		> [class*='grid-']:nth-child(#{$i}) {
			transform: translateY(func.rhythm($col-gap));
		}

		@include breakpoint.bp-only(sm) {
			> [class*='grid-']:last-child {
				transform: translateY(func.rhythm($gap));
			}
		}
	}
}

@mixin make-asymmetric-row() {
	$gap: 6;
	$bp-gap: $gap;
	$margin: 7;

	margin: func.rhythm($margin) 0 0;

	&:not(.asymmetric-reversed) {
		@include make-asymmetric-cols($bp-gap);
	}

	&.asymmetric-reversed {
		@include make-asymmetric-cols($bp-gap, true);
	}

	@include breakpoint.bp-up(sm) {
		margin: func.rhythm($margin * 1.25) 0 0;

		&:not(.asymmetric-reversed) {
			$bp-gap: $gap * 1.25;
			@include make-asymmetric-cols($bp-gap);
		}

		&.asymmetric-reversed {
			$bp-gap: math.div($gap, 2);
			@include make-asymmetric-cols($bp-gap, true);
		}
	}

	@include breakpoint.bp-up(md) {
		&.asymmetric-reversed {
			margin-bottom: calc(100px);
		}
	}

	@include breakpoint.bp-up(lg) {


		margin: func.rhythm($margin * 1.5) 0 0;

		&:not(.asymmetric-reversed) {
			$bp-gap: $gap * 1.5;
			@include make-asymmetric-cols($bp-gap);
		}

		&.asymmetric-reversed {
			$bp-gap: $gap;
			@include make-asymmetric-cols($bp-gap, true);
			margin-bottom: calc(125px);
		}
	}

	@include breakpoint.bp-up(xl) {
		margin: func.rhythm($margin * 2) 0 0;

		&:not(.asymmetric-reversed) {
			$bp-gap: $gap * 2;
			@include make-asymmetric-cols($bp-gap);
		}

		&.asymmetric-reversed {
			$bp-gap: $gap;
			@include make-asymmetric-cols($bp-gap, true);
			margin-bottom: calc(150px);
		}
	}
}

@if var.$enable-grid-classes {
	.row {
		@include grid.make-row();
	}

	.asymmetric {
		@include make-asymmetric-row;

		@include breakpoint.bp-up(sm) {
			&-sm {
				@include make-asymmetric-row;
			}
		}

		@include breakpoint.bp-up(md) {
			&-md {
				@include make-asymmetric-row;
			}
		}

		@include breakpoint.bp-up(lg) {
			&-lg {
				@include make-asymmetric-row;
			}
		}

		@include breakpoint.bp-up(xl) {
			&-xl {
				@include make-asymmetric-row;
			}
		}
	}

	// Remove the negative margin from default .row, then the horizontal padding
	// from all immediate children columns (to prevent runaway style inheritance).
	.no-gutters {
		margin-right: 0;
		margin-left: 0;

		> .grid,
		> [class*='grid-'] {
			padding-right: 0;
			padding-left: 0;
		}
	}

	.no-wrap {
		flex-wrap: nowrap;
	}
}

// Columns
//
// Common styles for small and large grid columns

@if var.$enable-grid-classes {
	@include gridFramework.make-grid-columns();
}
