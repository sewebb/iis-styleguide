@charset "UTF-8";
@use 'sass:meta';
@use 'colors' as colors;

/// Get a shaded version of a color
/// @group Colors
@function shade($color, $percentage) {
	@return mix(black, colors.$color, $percentage);
}

/// Get a tinted version of a color
/// @group Colors
@function tint($color, $percentage) {
	@return mix(white, colors.$color, $percentage);
}

/// @group Colors
$colors: (
	black: colors.$color-black,
	snow: colors.$color-snow,
	cyberspace: colors.$color-cyberspace,
	dark: colors.$color-dark,
	granit: colors.$color-granit,
	concrete: colors.$color-concrete,
	ash: colors.$color-ash,
	ruby: (
		base: colors.$color-ruby,
		light: colors.$color-ruby-light,
		dark: colors.$color-ruby-dark,
		medium-dark: colors.$color-ruby-medium-dark
	),
	peacock: (
		base: colors.$color-peacock,
		light: colors.$color-peacock-light,
		dark: colors.$color-peacock-dark,
		medium-dark: colors.$color-peacock-medium-dark
	),
	jade: (
		base: colors.$color-jade,
		light: colors.$color-jade-light,
		dark: colors.$color-jade-dark,
		medium-dark: colors.$color-jade-medium-dark
	),
	sandstone: (
		base: colors.$color-sandstone,
		light: colors.$color-sandstone-light,
		dark: colors.$color-sandstone-dark,
		medium-dark: colors.$color-sandstone-medium-dark
	),
	lemon: (
		base: colors.$color-lemon,
		light: colors.$color-lemon-light,
		dark: colors.$color-lemon-dark,
		medium-dark: colors.$color-lemon-medium-dark
	),
	ocean: (
		base: colors.$color-ocean,
		light: colors.$color-ocean-light,
		dark : colors.$color-ocean-dark,
		medium-dark: colors.$color-ocean-medium-dark
	),
	success: (
		base: colors.$color-success,
		dark: colors.$color-success-dark
	)
);

/// Generate color values on attributes e.g @include color_values(colors.$colors, 'color', $separator: '-');
/// Generates this: color: color-name;
/// @group Colors
@mixin color_values($map, $attribute, $prefix: '-', $separator: '-', $base: 'base') {
	@each $key, $value in $map {
		&#{if($key != $base, #{$prefix}#{$key}, '')} {
			@if meta.type-of($value) == 'map' {
				@include color_values($value, $attribute, $separator);
			}
			@else {
				#{$attribute}: $value !important;
			}
		}
	}
}

/// Generate color classes with attribute and value and pass optional nested element e.g @include color_classes ($map: colors.$colors,$prefix: '-',$attribute: 'fill',$element: 'svg');
/// Generates this: element.color-name element {fill: color-name}
/// @group Colors
@mixin color_classes($map, $attribute, $prefix: '', $separator: '.', $base: 'base', $element: '') {
	@each $key, $value in $map {
		&#{if($key != $base, #{$separator}#{$key}, '')} {
			@if meta.type-of($value) == 'map' {
				@include color_classes($value, $attribute, $prefix: '.', $separator: '-', $element:  $element);
			}
			@else {
				@if ($element != '') {
					#{$element} {
						#{$attribute}: $value;
					}
				}

				@else {
					#{$attribute}: $value;
				}
			}
		}
	}
}

/// Generate wordpress color classes with attribute and value
/// Generates this: .has-colorname-color
/// @group Colors
@mixin wordpress_color_classes($map, $attribute,  $separator: '-', $suffix: '', $base: 'base') {
	@each $key, $value in $map {
		@if meta.type-of($value) == 'map' {
			&#{if($key != $base, #{$separator}#{$key}, '')} {
				@include wordpress_color_classes($value, $attribute, $separator, '-color');
			}
		}
		@else {
			&#{if($key != $base, #{$separator}#{$key}, '')}#{$suffix} {
				#{$attribute}: $value;
			}
		}
	}
}
