@charset 'UTF-8';

/// Get a shaded version of a color
/// @group Colors
@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

/// Get a tinted version of a color
/// @group Colors
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

/// @group Colors
$colors: (
	black: $color-black,
	snow: $color-snow,
	cyberspace: $color-cyberspace,
	dark: $color-dark,
	granit: $color-granit,
	concrete: $color-concrete,
	ash: $color-ash,
	ruby: (
		base: $color-ruby,
		light: $color-ruby-light,
		dark: $color-ruby-dark
	),
	peacock: (
		base: $color-peacock,
		light: $color-peacock-light,
		dark: $color-peacock-dark
	),
	jade: (
		base: $color-jade,
		light: $color-jade-light,
		dark: $color-jade-dark
	),
	sandstone: (
		base: $color-sandstone,
		light: $color-sandstone-light,
		dark: $color-sandstone-dark
	),
	lemon: (
		base: $color-lemon,
		light: $color-lemon-light,
		dark: $color-lemon-dark
	),
	ocean: (
		base: $color-ocean,
		light: $color-ocean-light,
		dark : $color-ocean-dark
	)
);

/// Generate color values on attributes e.g @include color_values($colors, 'color', $separator: '-');
/// Generates this: color: color-name;
/// @group Colors
@mixin color_values($map, $attribute, $prefix: '-', $separator: '-', $base: 'base') {
	@each $key, $value in $map {
		&#{if($key != $base, #{$prefix}#{$key}, '')} {
			@if type-of($value) == 'map' {
				@include color_values($value, $attribute, $separator);
			}
			@else {
				#{$attribute}: $value !important;
			}
		}
	}
}

/// Generate color classes with attribute and value and pass optional nested element e.g @include color_classes ($map: $colors,$prefix: '-',$attribute: 'fill',$element: 'svg');
/// Generates this: element.color-name element {fill: color-name}
/// @group Colors
@mixin color_classes($map, $attribute, $prefix: '', $separator: '.', $base: 'base', $element: '') {
	@each $key, $value in $map {
		&#{if($key != $base, #{$separator}#{$key}, '')} {
			@if type-of($value) == 'map' {
				@include color_classes($value, $attribute, $prefix, $separator: '-', $element:  $element);
			}
			@else {
				@if ($element != '') {
					#{$element} {
						#{$attribute}: $value;
					}
				}

				@else {
					#{$attribute}: $value;
				}
			}
		}
	}
}

/// Generate wordpress color classes with attribute and value
/// Generates this: .has-color-name{$suffix}
/// @group Colors
@mixin wordpress_color_classes($map, $attribute,  $separator: '-', $suffix: '', $base: 'base') {
	@each $key, $value in $map {
		@if type-of($value) == 'map' {
			&#{if($key != $base, #{$separator}#{$key}, '')} {
				@include wordpress_color_classes($value, $attribute, $separator, '-color');
			}
		}
		@else {
			&#{if($key != $base, #{$separator}#{$key}, '')}#{$suffix} {
				#{$attribute}: $value;
			}
		}
	}
}
